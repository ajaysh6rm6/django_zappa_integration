=============================<Integrating Zappa for deployment>=============================
LINK-FOLLOWED=> https://blog.logrocket.com/zappa-and-aws-lambda-for-serverless-django/


=========<Zappa requirements>=========
To follow along with this tutorial, Zappa assumes you have the following:
>AWS Lambda IAM credentials (follow this guide)
>Some experience with Django
>A Python development environment with Pipenv and Django setup

=========<Features>=========
>Package your projects into Lambda-ready zip files and upload them to Amazon S3
>Set up necessary AWS IAM roles and permissions
>Deploy your application to various stages (dev, staging, prod)
>Automatically configure your project’s API Gateway routes, methods, and integration responses
>Turn your project’s API Gateway requests into valid WSGI, and return API Gateway-compatible HTTP responses

=========<FOLLOW-THESE-STEPS>=========

STEP1=>Setting up our Django project with Zappa

Zappa supports Python 3.6, 3.7, and 3.8. Before we can set up our Django project, verify that you have a supported version of Python by running:[python --version]


STEP2=>create django project with venv and install required [pip: django==2.1.9, zappa] and run your project [python manage.py runserver]


STEP3=>create an IAM user [AWS] with Administrator access  and install [aws cli] and configure in [cmd]:

[default]
aws_access_key_id = your_aws_access_key_id
aws_secret_access_key = your_aws_secret_access_key


STEP4=>run [zappa init] to Integrating Zappa for deployment

███████╗ █████╗ ██████╗ ██████╗  █████╗
╚══███╔╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗
  ███╔╝ ███████║██████╔╝██████╔╝███████║
 ███╔╝  ██╔══██║██╔═══╝ ██╔═══╝ ██╔══██║
███████╗██║  ██║██║     ██║     ██║  ██║
╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝     ╚═╝  ╚═╝

Welcome to Zappa!

Zappa is a system for running server-less Python web applications on AWS Lambda and AWS API Gateway.
This `init` command will help you create and configure your new Zappa deployment.
Let's get started!

Your Zappa configuration can support multiple production stages, like 'dev', 'staging', and 'production'.
What do you want to call this environment (default 'dev'): 

AWS Lambda and API Gateway are only available in certain regions. Let's check to make sure you have a profile set up in one that will work.
We couldn't find an AWS profile to use. Before using Zappa, you'll need to set one up. See here for more info: https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration

Your Zappa deployments will need to be uploaded to a private S3 bucket.
If you don't have a bucket yet, we'll create one for you too.
What do you want to call your bucket? (default 'zappa-10j6ohc59'):

It looks like this is a Django application!
What is the module path to your projects's Django settings?
We discovered: company.settings
Where are your project's settings? (default 'company.settings'):

You can optionally deploy to all available regions in order to provide fast global service.
If you are using Zappa for the first time, you probably don't want to do this!
Would you like to deploy this application globally? (default 'n') [y/n/(p)rimary]:         

Okay, here's your zappa_settings.json:

{
    "dev": {
        "django_settings": "zappatest.settings",
        "profile_name": null,
        "project_name": "company",
        "runtime": "python3.8",
        "s3_bucket": "zappa-10j6ohc56"
    }
}

Does this look okay? (default 'y') [y/n]:              

Done! Now you can deploy your Zappa application by executing:

        $ zappa deploy dev

After that, you can update your application code with:

        $ zappa update dev

To learn more, check out our project page on GitHub here: https://github.com/Zappa/Zappa
and stop by our Slack channel here: https://zappateam.slack.com

Enjoy!,
 ~ Team Zappa!


STEP5=>[zappa_settings.json] will be created goto [zappa_settings.json] add ["aws_region" : "us-east-1",]
{
    "dev": {
		"aws_region" : "us-east-1",
        "django_settings": "zappatest.settings",
        "profile_name": "default",
        "project_name": "company",
        "runtime": "python3.8",
        "s3_bucket": "zappa-10j6ohc56"
    }
}


STEP6=>run [zappa deploy dev]


STEP7=>Upon successful deployment, you should get a URL where you can access your API on the internet. It should look like this:
https://h76ave6fn6.execute-api.us-east-2.amazonaws.com/dev


STEP8=>if u r getting an error [disallowedHost] then add [ALLOWED_HOSTS = ['127.0.0.1', 'h76ave6fn6.execute-api.us-east-2.amazonaws.com',]] into settings.py


STEP9=>Next, update the remote deployment by running: [zappa update dev]


STEP10=>You should now see the standard 404 Django page: then add [/admin]


STEP11=>if static files missing then crate a [s3_bucket] on [aws] to Handling static files


STEP12=>In the “permissions” tab for your [aws s3_bucket], navigate to the CORS rules settings and add the following configuration to allow access from other hosts:
[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "GET"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "MaxAgeSeconds": 3000
    }
]


STEP13=>run [pip install django-s3-storage]


STEP14=>Open up [settings.py] and include djangos3storage as such:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_s3_storage',
]


STEP15=>Place the following block of code anywhere in your settings.py and then replace [‘zappatest-static-files’] with whatever name you used in naming your [s3_bucket]:

S3_BUCKET_NAME = "zappatest-static-files"
STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
AWS_S3_BUCKET_NAME_STATIC = S3_BUCKET_NAME
# serve the static files directly from the specified s3 bucket
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % S3_BUCKET_NAME
STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
# if you have configured a custom domain for your static files use:
#AWS_S3_PUBLIC_URL_STATIC = "https://static.yourdomain.com/"


STEP16=>Next, update the changes and push the static files to the bucket by running:[zappa update dev] & [zappa manage dev "collectstatic --noinput"]


STEP17=>Finally, open up the admin page once more and your page should render correctly.


=========Conclusion>=========

In this article, we explored serverless architecture in a Django app using Zappa and Amazon Web Services (AWS) Lambda.

We started by getting our Django project up and running locally with pipenv and pip3. Then, we set up our Zappa configurations and deployed to AWS Lambda in dev mode. Finally, we added support for static files with AWS S3 to make sure our web app looks and functions the way we want it to.

While we covered a lot in this article, there is still much to learn about serverless Django. To continue your education, I recommend that you check out the official Zappa documentation on the Python Python Index (PYPI) website, as well as the AWS Lambda docs.

